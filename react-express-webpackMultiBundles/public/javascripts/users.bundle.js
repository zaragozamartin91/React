webpackJsonp([0],{77:function(e,l,t){"use strict";Object.defineProperty(l,"__esModule",{value:!0});var a=[{name:"martin zaragoza",email:"zaragozamartin91@gmail.com",job:"programmer"},{name:"exequiel fidalgo",email:"exequiel.fidalgo@accusys.com.ar",job:"leader"}];l.default=a},78:function(e,l,t){"use strict";Object.defineProperty(l,"__esModule",{value:!0});var a=t(23),r=function(e){return e&&e.__esModule?e:{default:e}}(a),u=r.default.createClass({displayName:"User",render:function(){return r.default.createElement("div",null,r.default.createElement("p",null,this.props.user.name),r.default.createElement("ul",null,r.default.createElement("li",null,"Email: ",this.props.user.email),r.default.createElement("li",null,"Job: ",this.props.user.job)))}});l.default=u},80:function(e,l,t){"use strict";function a(e){return e&&e.__esModule?e:{default:e}}var r=t(77),u=a(r),n=t(23),o=a(n),d=t(29),s=a(d),i=t(78),c=a(i);console.log("users:"),console.log(u.default);var f=o.default.createClass({displayName:"UserPage",render:function(){return o.default.createElement("div",{id:"users"},u.default.map(function(e){return o.default.createElement(c.default,{user:e})}))}});null.map(),s.default.render(o.default.createElement(f,null),document.getElementById("root"))}},[80]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,